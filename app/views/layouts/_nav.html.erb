<nav class="bg-indigo-600">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex items-center justify-between h-16">
      <div class="flex-shrink-0">
        <%= link_to "FairShare", root_path, class: "text-white text-2xl font-bold" %>
      </div>
      <div class="hidden md:block">
        <div class="ml-10 flex items-baseline space-x-4">
          <%= render 'shared/nav_links' %>
        </div>
      </div>
      <div class="md:hidden">
        <button id="mobile-menu-button" type="button" class="inline-flex items-center justify-center p-2 rounded-md text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white" aria-controls="mobile-menu" aria-expanded="false">
          <span class="sr-only">Open main menu</span>
          <svg class="block h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
        </button>
      </div>
    </div>
  </div>

  <div id="mobile-menu" class="md:hidden" style="max-height: 0; overflow: hidden; transition: max-height 0.3s ease-out, opacity 0.3s ease-out; opacity: 0;">
    <div class="px-2 pt-2 pb-3 space-y-1 sm:px-3">
      <%= render 'shared/nav_links', mobile: true %>
    </div>
  </div>
</nav>

<script>
    function initializeMobileMenu() {
        const mobileMenuButton = document.getElementById('mobile-menu-button');
        const mobileMenu = document.getElementById('mobile-menu');

        if (mobileMenuButton && mobileMenu) {
            // Remove any existing event listeners to avoid duplicates
            mobileMenuButton.removeEventListener('click', toggleMobileMenu);

            // Define the toggle function
            function toggleMobileMenu() {
                const expanded = mobileMenu.getAttribute('aria-expanded') === 'true' || false;
                mobileMenu.setAttribute('aria-expanded', !expanded);
                mobileMenu.style.maxHeight = expanded ? '0' : mobileMenu.scrollHeight + 'px';
                mobileMenu.style.opacity = expanded ? '0' : '1';
            }

            // Add the event listener
            mobileMenuButton.addEventListener('click', toggleMobileMenu);
        }
    }

    // Initialize on initial page load
    document.addEventListener('DOMContentLoaded', initializeMobileMenu);

    // Reinitialize after Turbo renders a new page
    document.addEventListener('turbo:render', initializeMobileMenu);

</script>